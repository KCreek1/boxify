plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"

    // // If you need Firebase/Google services in this example:
    // // (Adjust version as needed)
    id "com.google.gms.google-services" version "4.3.15"
}

//-------------------------------------------------------------------
// 1) Load local.properties to dynamically set version codes, etc.
//    This is optional; you can remove if you prefer hard-coded versions.
//-------------------------------------------------------------------
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

// Provide defaults if not found in local.properties
def flutterVersionCode = localProperties.getProperty('flutter.versionCode', '1')
def flutterVersionName = localProperties.getProperty('flutter.versionName', '1.0')

android {
    // You can either use 'compileSdk = 34' or rely on Flutter's recommended compileSdkVersion
    // If you must align with a plugin requiring 34 or higher, just set it explicitly:
    compileSdk = 34

    // Or if you want to use the Flutter-managed versions:
    // compileSdk = flutter.compileSdkVersion

    // If you rely on the Flutter-managed NDK version:
    // ndkVersion = flutter.ndkVersion

    defaultConfig {
        // Application ID for this example
        applicationId "com.example.example" // changed to this so googleservicejson can find weezify firebase

        minSdk = 23
        targetSdk = 34

        // Use the dynamic version code / name (or just hard-code them)
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        // If you plan to demo Firebase or other large libs, multiDex can help
        multiDexEnabled true
    }

    // We keep the same compile options / Kotlin settings from your original example
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    // Optionally define buildTypes
    buildTypes {
        release {
            // For a simple example, you can skip minifyEnabled or proguard
            // unless you specifically want to show how to do that.
            // minifyEnabled true
            // proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // If you'd like to demonstrate release signing in the example,
            // you could add a debug signing config or custom logic here.
            signingConfig signingConfigs.debug
        }
    }
}

// Flutter block pointing to your library
flutter {
    source = "../.."
}

//-------------------------------------------------------------------
// 2) Dependencies
//    If you want to show how to integrate Firebase, multiDex, etc. in the example:
//-------------------------------------------------------------------
dependencies {
    // (Optional) If demonstrating Firebase:
    implementation platform('com.google.firebase:firebase-bom:32.2.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.firebase:firebase-firestore'
    implementation 'com.google.firebase:firebase-storage'
    implementation 'com.google.firebase:firebase-messaging'

    // multiDex if your example might exceed the 65k method limit
    implementation 'androidx.multidex:multidex:2.0.1'
}

// // If using Google services in your example, apply the plugin at the bottom:
// apply plugin: "com.google.gms.google-services"
